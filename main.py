# -*- coding: utf-8 -*-
import logging
import os
import random
import re
from collections import defaultdict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode # Убедимся, что ParseMode импортирован

# !!! МАҢЫЗДЫ: "YOUR_BOT_TOKEN_HERE" ОРНЫНА ӨЗІҢІЗДІҢ НАҚТЫ ТОКЕНІҢІЗДІ ҚОЙЫҢЫЗ !!!
# Қоршаған орта айнымалысын пайдаланыңыз немесе төмендегі жолды ауыстырыңыз
BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE") git status # Проверить, видит ли Git новый файл (он должен быть в 'Untracked files')

# --- Логтауды баптау ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- Заттар бойынша деректер ---
COMPOUNDS_DATA = {
    "H2O": {"name": "Су", "type": "Оксид", "properties": "Түссіз, иіссіз, дәмсіз сұйықтық.", "application": "Ішуге, өнеркәсіпте, зертханада."},
    "NACL": {"name": "Натрий хлориді (ас тұзы)", "type": "Тұз", "properties": "Ақ кристалдар, суда ериді, тұзды дәм.", "application": "Тағамдық қоспа, консервант, химия өнеркәсібінде."},
    "O2": {"name": "Оттек", "type": "Жай зат (бейметалл)", "properties": "Түссіз, иіссіз газ, жануды қолдайды.", "application": "Тыныс алу, дәнекерлеу, медицинада."},
    "CO2": {"name": "Көмірқышқыл газы", "type": "Оксид", "properties": "Түссіз, иіссіз газ, ауадан ауыр, жануды қолдамайды.", "application": "Газдалған сусындар, өрт сөндіргіштер, фотосинтезде."},
    "FE": {"name": "Темір", "type": "Жай зат (металл)", "properties": "Күміс түсті сұр металл, созылғыш, магнитті.", "application": "Құрылыс, машина жасау, медицина (гемоглобин)."},
    "H2SO4": {"name": "Күкірт қышқылы", "type": "Қышқыл", "properties": "Түссіз майлы сұйықтық, өте күйдіргіш, гигроскопиялық.", "application": "Тыңайтқыштар, бояғыштар, аккумуляторлар өндірісі."},
    "NAOH": {"name": "Натрий гидроксиді (каустикалық сода)", "type": "Негіз (сілті)", "properties": "Ақ қатты заттар, өте гигроскопиялық, күйдіргіш.", "application": "Сабын, қағаз өндірісі, ағынды суларды тазарту."},
    "NH3": {"name": "Аммиак", "type": "Негіз", "properties": "Түссіз өткір иісті газ, суда жақсы ериді.", "application": "Тыңайтқыштар, азот қышқылы өндірісі, хладагент."},
    "CH4": {"name": "Метан", "type": "Көмірсутек", "properties": "Түссіз, иіссіз газ, табиғи газдың негізгі компоненті.", "application": "Отын, химиялық шикізат."},
    "HCL": {"name": "Хлорсутек (тұз қышқылы)", "type": "Қышқыл", "properties": "Түссіз өткір иісті газ, сулы ерітіндісі - күшті қышқыл.", "application": "Хлоридтер өндірісі, металдарды тазарту, ас қорытуда."},
    "C6H12O6": {"name": "Глюкоза", "type": "Көмірсу", "properties": "Ақ кристалды зат, тәтті дәм, суда ериді.", "application": "Тірі организмдер үшін энергия көзі, тамақ өнеркәсібінде."},
    "C2H5OH": {"name": "Этанол (этил спирті)", "type": "Спирт", "properties": "Түссіз ұшқыш сұйықтық, тән иісі бар.", "application": "Сусындар өндірісі, еріткіш, отын, антисептик."},
    "CH3COOH": {"name": "Сірке қышқылы", "type": "Карбон қышқылы", "properties": "Түссіз өткір қышқыл иісті сұйықтық.", "application": "Тағамдық қоспа (сірке суы), полимерлер өндірісі, еріткіш."},
    "CACO3": {"name": "Кальций карбонаты (бор, әктас)", "type": "Тұз", "properties": "Ақ қатты зат, суда ерімейді.", "application": "Құрылыс, цемент өндірісі, тағамдық қоспа."},
    "SIO2": {"name": "Кремний диоксиді (кремнезем, құм)", "type": "Оксид", "properties": "Қатты зат, суда ерімейді, жоғары қаттылық.", "application": "Құрылыс, шыны өндірісі, абразивті материал."},
    "AL2O3": {"name": "Алюминий оксиді (глинозем)", "type": "Оксид", "properties": "Ақ қатты зат, амфотерлі оксид.", "application": "Алюминий өндірісі, абразивті материал, катализатор."},
    "CUSO4": {"name": "Мыс(II) сульфаты (мыс купоросы)", "type": "Тұз", "properties": "Көк кристалдар, суда ериді.", "application": "Ауыл шаруашылығы (фунгицид), гальванотехника."},
    "AGNO3": {"name": "Күміс(I) нитраты (ляпис)", "type": "Тұз", "properties": "Ақ кристалдар, суда ериді, жарықта қараяды.", "application": "Медицина (күйдіргіш зат), фотография."},
    "KMNO4": {"name": "Калий перманганаты (марганцовка)", "type": "Тұз", "properties": "Қою күлгін кристалдар, суда ериді, күшті тотықтырғыш.", "application": "Антисептик, химиялық реакцияларда тотықтырғыш."},
}

# --- Менделеев кестесі (іздеуге арналған деректер) ---
ELEMENTS_DATA = {
    "H": {"name": "Сутек", "atomic_number": 1, "atomic_mass": 1.008},
    "He": {"name": "Гелий", "atomic_number": 2, "atomic_mass": 4.0026},
    "Li": {"name": "Литий", "atomic_number": 3, "atomic_mass": 6.94},
    "Be": {"name": "Бериллий", "atomic_number": 4, "atomic_mass": 9.0122},
    "B": {"name": "Бор", "atomic_number": 5, "atomic_mass": 10.81},
    "C": {"name": "Көміртек", "atomic_number": 6, "atomic_mass": 12.011},
    "N": {"name": "Азот", "atomic_number": 7, "atomic_mass": 14.007},
    "O": {"name": "Оттек", "atomic_number": 8, "atomic_mass": 15.999},
    "F": {"name": "Фтор", "atomic_number": 9, "atomic_mass": 18.998},
    "Ne": {"name": "Неон", "atomic_number": 10, "atomic_mass": 20.180},
    "Na": {"name": "Натрий", "atomic_number": 11, "atomic_mass": 22.990},
    "Mg": {"name": "Магний", "atomic_number": 12, "atomic_mass": 24.305},
    "Al": {"name": "Алюминий", "atomic_number": 13, "atomic_mass": 26.982},
    "Si": {"name": "Кремний", "atomic_number": 14, "atomic_mass": 28.085},
    "P": {"name": "Фосфор", "atomic_number": 15, "atomic_mass": 30.974},
    "S": {"name": "Күкірт", "atomic_number": 16, "atomic_mass": 32.06},
    "Cl": {"name": "Хлор", "atomic_number": 17, "atomic_mass": 35.45},
    "K": {"name": "Калий", "atomic_number": 19, "atomic_mass": 39.098},
    "Ca": {"name": "Кальций", "atomic_number": 20, "atomic_mass": 40.078},
    "Sc": {"name": "Скандий", "atomic_number": 21, "atomic_mass": 44.956},
    "Ti": {"name": "Титан", "atomic_number": 22, "atomic_mass": 47.867},
    "V": {"name": "Ванадий", "atomic_number": 23, "atomic_mass": 50.942},
    "Cr": {"name": "Хром", "atomic_number": 24, "atomic_mass": 51.996},
    "Mn": {"name": "Марганец", "atomic_number": 25, "atomic_mass": 54.938},
    "Fe": {"name": "Темір", "atomic_number": 26, "atomic_mass": 55.845},
    "Ni": {"name": "Никель", "atomic_number": 28, "atomic_mass": 58.693},
    "Cu": {"name": "Мыс", "atomic_number": 29, "atomic_mass": 63.546},
    "Zn": {"name": "Мырыш", "atomic_number": 30, "atomic_mass": 65.38},
    "Br": {"name": "Бром", "atomic_number": 35, "atomic_mass": 79.904},
    "Ag": {"name": "Күміс", "atomic_number": 47, "atomic_mass": 107.87},
    "Sn": {"name": "Қалайы", "atomic_number": 50, "atomic_mass": 118.71},
    "I": {"name": "Йод", "atomic_number": 53, "atomic_mass": 126.90},
    "Au": {"name": "Алтын", "atomic_number": 79, "atomic_mass": 196.97},
    "Hg": {"name": "Сынап", "atomic_number": 80, "atomic_mass": 200.59},
    "Pb": {"name": "Қорғасын", "atomic_number": 82, "atomic_mass": 207.2},
    "U": {"name": "Уран", "atomic_number": 92, "atomic_mass": 238.03},
}

# --- Реакцияларға арналған деректер ---
# Кілт - реагенттер кортежі (сұрыпталған, ЖОҒАРҒЫ РЕГИСТР), мәні - реакция деректері бар сөздік
REACTIONS_DATA = {
    # === Қосылу реакциялары ===
    ('H2', 'O2'): {'type': 'Қосылу', 'reactants': ('H2', 'O2'), 'products': ('H2O',), 'equation': "2H2 + O2 -> 2H2O"},
    ('CL2', 'NA'): {'type': 'Қосылу', 'reactants': ('Na', 'Cl2'), 'products': ('NaCl',), 'equation': "2Na + Cl2 -> 2NaCl"},
    ('FE', 'S'): {'type': 'Қосылу', 'reactants': ('Fe', 'S'), 'products': ('FeS',), 'equation': "Fe + S -> FeS"},
    ('CAO', 'H2O'): {'type': 'Қосылу', 'reactants': ('CaO', 'H2O'), 'products': ('Ca(OH)2',), 'equation': "CaO + H2O -> Ca(OH)2"},
    ('H2O', 'SO3'): {'type': 'Қосылу', 'reactants': ('SO3', 'H2O'), 'products': ('H2SO4',), 'equation': "SO3 + H2O -> H2SO4"},
    ('H2', 'N2'): {'type': 'Қосылу', 'reactants': ('N2', 'H2'), 'products': ('NH3',), 'equation': "N2 + 3H2 -> 2NH3"},
    ('O2', 'P'): {'type': 'Қосылу', 'reactants': ('P', 'O2'), 'products': ('P2O5',), 'equation': "4P + 5O2 -> 2P2O5"},
    ('AL', 'O2'): {'type': 'Қосылу', 'reactants': ('Al', 'O2'), 'products': ('Al2O3',), 'equation': "4Al + 3O2 -> 2Al2O3"},
    ('H2', 'CL2'): {'type': 'Қосылу', 'reactants': ('H2', 'Cl2'), 'products': ('HCl',), 'equation': "H2 + Cl2 -> 2HCl"},
    ('H2O', 'SO2'): {'type': 'Қосылу', 'reactants': ('SO2', 'H2O'), 'products': ('H2SO3',), 'equation': "SO2 + H2O <=> H2SO3"},
    ('K2O', 'H2O'): {'type': 'Қосылу', 'reactants': ('K2O', 'H2O'), 'products': ('KOH',), 'equation': "K2O + H2O -> 2KOH"},
    ('MG', 'O2'): {'type': 'Қосылу', 'reactants': ('Mg', 'O2'), 'products': ('MgO',), 'equation': "2Mg + O2 -> 2MgO"},
    ('C', 'O2'): {'type': 'Қосылу', 'reactants': ('C', 'O2'), 'products': ('CO2',), 'equation': "C + O2 -> CO2"},
    ('N2', 'O2'): {'type': 'Қосылу', 'reactants': ('N2', 'O2'), 'products': ('NO',), 'equation': "N2 + O2 -> 2NO"},
    ('FE', 'O2'): {'type': 'Қосылу', 'reactants': ('Fe', 'O2'), 'products': ('Fe3O4',), 'equation': "3Fe + 2O2 -> Fe3O4"},

    # === Айырылу реакциялары ===
    ('CACO3',): {'type': 'Айырылу', 'reactants': ('CaCO3',), 'products': ('CaO', 'CO2'), 'equation': "CaCO3 -> CaO + CO2"},
    ('KCLO3',): {'type': 'Айырылу', 'reactants': ('KClO3',), 'products': ('KCl', 'O2'), 'equation': "2KClO3 -> 2KCl + 3O2"},
    ('H2O2',): {'type': 'Айырылу', 'reactants': ('H2O2',), 'products': ('H2O', 'O2'), 'equation': "2H2O2 -> 2H2O + O2"},
    ('H2O',): {'type': 'Айырылу', 'reactants': ('H2O',), 'products': ('H2', 'O2'), 'equation': "2H2O -> 2H2 + O2"},
    ('NH4NO3',): {'type': 'Айырылу', 'reactants': ('NH4NO3',), 'products': ('N2O', 'H2O'), 'equation': "NH4NO3 -> N2O + 2H2O"},
    ('CU(OH)2',): {'type': 'Айырылу', 'reactants': ('Cu(OH)2',), 'products': ('CuO', 'H2O'), 'equation': "Cu(OH)2 -> CuO + H2O"},
    ('NAHCO3',): {'type': 'Айырылу', 'reactants': ('NaHCO3',), 'products': ('Na2CO3', 'CO2', 'H2O'), 'equation': "2NaHCO3 -> Na2CO3 + CO2 + H2O"},
    ('HNO3',): {'type': 'Айырылу', 'reactants': ('HNO3',), 'products': ('NO2', 'O2', 'H2O'), 'equation': "4HNO3 -> 4NO2 + O2 + 2H2O"},
    ('(CUOH)2CO3',): {'type': 'Айырылу', 'reactants': ('(CuOH)2CO3',), 'products': ('CuO', 'H2O', 'CO2'), 'equation': "(CuOH)2CO3 -> 2CuO + H2O + CO2"},
    ('HGO',): {'type': 'Айырылу', 'reactants': ('HgO',), 'products': ('Hg', 'O2'), 'equation': "2HgO -> 2Hg + O2"},

    # === Орынбасу реакциялары ===
    ('CUSO4', 'ZN'): {'type': 'Орынбасу', 'reactants': ('Zn', 'CuSO4'), 'products': ('ZnSO4', 'Cu'), 'equation': "Zn + CuSO4 -> ZnSO4 + Cu"},
    ('CUSO4', 'FE'): {'type': 'Орынбасу', 'reactants': ('Fe', 'CuSO4'), 'products': ('FeSO4', 'Cu'), 'equation': "Fe + CuSO4 -> FeSO4 + Cu"},
    ('HCL', 'ZN'): {'type': 'Орынбасу', 'reactants': ('Zn', 'HCl'), 'products': ('ZnCl2', 'H2'), 'equation': "Zn + 2HCl -> ZnCl2 + H2"},
    ('HCL', 'MG'): {'type': 'Орынбасу', 'reactants': ('Mg', 'HCl'), 'products': ('MgCl2', 'H2'), 'equation': "Mg + 2HCl -> MgCl2 + H2"},
    ('KBR', 'CL2'): {'type': 'Орынбасу', 'reactants': ('Cl2', 'KBr'), 'products': ('KCl', 'Br2'), 'equation': "Cl2 + 2KBr -> 2KCl + Br2"},
    ('H2O', 'NA'): {'type': 'Орынбасу', 'reactants': ('Na', 'H2O'), 'products': ('NaOH', 'H2'), 'equation': "2Na + 2H2O -> 2NaOH + H2"},
    ('AGNO3', 'CU'): {'type': 'Орынбасу', 'reactants': ('Cu', 'AgNO3'), 'products': ('Cu(NO3)2', 'Ag'), 'equation': "Cu + 2AgNO3 -> Cu(NO3)2 + 2Ag"},
    ('CUO', 'H2'): {'type': 'Орынбасу', 'reactants': ('CuO', 'H2'), 'products': ('Cu', 'H2O'), 'equation': "CuO + H2 -> Cu + H2O"},
    ('AL', 'HCL'): {'type': 'Орынбасу', 'reactants': ('Al', 'HCl'), 'products': ('AlCl3', 'H2'), 'equation': "2Al + 6HCl -> 2AlCl3 + 3H2"},
    ('H2SO4', 'ZN'): {'type': 'Орынбасу', 'reactants': ('Zn', 'H2SO4'), 'products': ('ZnSO4', 'H2'), 'equation': "Zn + H2SO4 -> ZnSO4 + H2"},
    ('FE', 'HCL'): {'type': 'Орынбасу', 'reactants': ('Fe', 'HCl'), 'products': ('FeCl2', 'H2'), 'equation': "Fe + 2HCl -> FeCl2 + H2"},

    # === Алмасу реакциялары (Бейтараптану) ===
    ('HCL', 'NAOH'): {'type': 'Алмасу (Бейтараптану)', 'reactants': ('HCl', 'NaOH'), 'products': ('NaCl', 'H2O'), 'equation': "HCl + NaOH -> NaCl + H2O"},
    ('H2SO4', 'KOH'): {'type': 'Алмасу (Бейтараптану)', 'reactants': ('H2SO4', 'KOH'), 'products': ('K2SO4', 'H2O'), 'equation': "H2SO4 + 2KOH -> K2SO4 + 2H2O"},
    ('CA(OH)2', 'HNO3'): {'type': 'Алмасу (Бейтараптану)', 'reactants': ('Ca(OH)2', 'HNO3'), 'products': ('Ca(NO3)2', 'H2O'), 'equation': "Ca(OH)2 + 2HNO3 -> Ca(NO3)2 + 2H2O"},
    ('H3PO4', 'NAOH'): {'type': 'Алмасу (Бейтараптану)', 'reactants': ('H3PO4', 'NaOH'), 'products': ('Na3PO4', 'H2O'), 'equation': "H3PO4 + 3NaOH -> Na3PO4 + 3H2O"},
    ('HNO3', 'NH3'): {'type': 'Алмасу (Бейтараптану)', 'reactants': ('NH3', 'HNO3'), 'products': ('NH4NO3',), 'equation': "NH3 + HNO3 -> NH4NO3"},

    # === Алмасу реакциялары (Тұнба түзілу) ===
    ('AGNO3', 'NACL'): {'type': 'Алмасу (Тұнба түзілу)', 'reactants': ('AgNO3', 'NaCl'), 'products': ('AgCl', 'NaNO3'), 'equation': "AgNO3 + NaCl -> AgCl(s) + NaNO3"},
    ('BACL2', 'NA2SO4'): {'type': 'Алмасу (Тұнба түзілу)', 'reactants': ('BaCl2', 'Na2SO4'), 'products': ('BaSO4', 'NaCl'), 'equation': "BaCl2 + Na2SO4 -> BaSO4(s) + 2NaCl"},
    ('KI', 'PB(NO3)2'): {'type': 'Алмасу (Тұнба түзілу)', 'reactants': ('Pb(NO3)2', 'KI'), 'products': ('PbI2', 'KNO3'), 'equation': "Pb(NO3)2 + 2KI -> PbI2(s) + 2KNO3"},
    ('CUSO4', 'NAOH'): {'type': 'Алмасу (Тұнба түзілу)', 'reactants': ('CuSO4', 'NaOH'), 'products': ('Cu(OH)2', 'Na2SO4'), 'equation': "CuSO4 + 2NaOH -> Cu(OH)2(s) + Na2SO4"},
    ('FECL3', 'NAOH'): {'type': 'Алмасу (Тұнба түзілу)', 'reactants': ('FeCl3', 'NaOH'), 'products': ('Fe(OH)3', 'NaCl'), 'equation': "FeCl3 + 3NaOH -> Fe(OH)3(s) + 3NaCl"},
    ('CACL2', 'NA2CO3'): {'type': 'Алмасу (Тұнба түзілу)', 'reactants': ('CaCl2', 'Na2CO3'), 'products': ('CaCO3', 'NaCl'), 'equation': "CaCl2 + Na2CO3 -> CaCO3(s) + 2NaCl"},
    ('BA(NO3)2', 'NA2CO3'): {'type': 'Алмасу (Тұнба түзілу)', 'reactants': ('Ba(NO3)2', 'Na2CO3'), 'products': ('BaCO3', 'NaNO3'), 'equation': "Ba(NO3)2 + Na2CO3 -> BaCO3(s) + 2NaNO3"},

    # === Алмасу реакциялары (Газ бөліну) ===
    ('HCL', 'NA2CO3'): {'type': 'Алмасу (Газ бөліну)', 'reactants': ('Na2CO3', 'HCl'), 'products': ('NaCl', 'H2O', 'CO2'), 'equation': "Na2CO3 + 2HCl -> 2NaCl + H2O + CO2(g)"},
    ('FES', 'HCL'): {'type': 'Алмасу (Газ бөліну)', 'reactants': ('FeS', 'HCl'), 'products': ('FeCl2', 'H2S'), 'equation': "FeS + 2HCl -> FeCl2 + H2S(g)"},
    ('NH4CL', 'NAOH'): {'type': 'Алмасу (Газ бөліну)', 'reactants': ('NH4Cl', 'NaOH'), 'products': ('NaCl', 'NH3', 'H2O'), 'equation': "NH4Cl + NaOH -> NaCl + NH3(g) + H2O"},
    ('HCL', 'NAHCO3'): {'type': 'Алмасу (Газ бөліну)', 'reactants': ('NaHCO3', 'HCl'), 'products': ('NaCl', 'H2O', 'CO2'), 'equation': "NaHCO3 + HCl -> NaCl + H2O + CO2(g)"},
    ('NA2SO3', 'HCL'): {'type': 'Алмасу (Газ бөліну)', 'reactants': ('Na2SO3', 'HCl'), 'products': ('NaCl', 'H2O', 'SO2'), 'equation': "Na2SO3 + 2HCl -> 2NaCl + H2O + SO2(g)"},

    # === Жану реакциялары ===
    ('CH4', 'O2'): {'type': 'Жану', 'reactants': ('CH4', 'O2'), 'products': ('CO2', 'H2O'), 'equation': "CH4 + 2O2 -> CO2 + 2H2O"},
    ('C2H5OH', 'O2'): {'type': 'Жану', 'reactants': ('C2H5OH', 'O2'), 'products': ('CO2', 'H2O'), 'equation': "C2H5OH + 3O2 -> 2CO2 + 3H2O"},
    ('C6H12O6', 'O2'): {'type': 'Жану', 'reactants': ('C6H12O6', 'O2'), 'products': ('CO2', 'H2O'), 'equation': "C6H12O6 + 6O2 -> 6CO2 + 6H2O"},
    ('C3H8', 'O2'): {'type': 'Жану', 'reactants': ('C3H8', 'O2'), 'products': ('CO2', 'H2O'), 'equation': "C3H8 + 5O2 -> 3CO2 + 4H2O"},
    ('O2', 'S'): {'type': 'Жану', 'reactants': ('S', 'O2'), 'products': ('SO2',), 'equation': "S + O2 -> SO2"},
    ('H2S', 'O2'): {'type': 'Жану', 'reactants': ('H2S', 'O2'), 'products': ('SO2', 'H2O'), 'equation': "2H2S + 3O2 -> 2SO2 + 2H2O"},
    ('CO', 'O2'): {'type': 'Жану', 'reactants': ('CO', 'O2'), 'products': ('CO2',), 'equation': "2CO + O2 -> 2CO2"},

    # === Басқа маңызды реакциялар ===
    ('CO', 'FE2O3'): {'type': 'Басқа', 'reactants': ('Fe2O3', 'CO'), 'products': ('Fe', 'CO2'), 'equation': "Fe2O3 + 3CO -> 2Fe + 3CO2"},
    ('HCL', 'MNO2'): {'type': 'Басқа', 'reactants': ('MnO2', 'HCl'), 'products': ('MnCl2', 'Cl2', 'H2O'), 'equation': "MnO2 + 4HCl -> MnCl2 + Cl2 + 2H2O"},
    ('CL2', 'H2O'): {'type': 'Басқа', 'reactants': ('Cl2', 'H2O'), 'products': ('HCl', 'HClO'), 'equation': "Cl2 + H2O <=> HCl + HClO"},
    ('CU', 'HNO3'): {'type': 'Басқа', 'reactants': ('Cu', 'HNO3'), 'products': ('Cu(NO3)2', 'NO2', 'H2O'), 'equation': "Cu + 4HNO3(конц.) -> Cu(NO3)2 + 2NO2 + 2H2O"},
    ('ZN', 'NAOH'): {'type': 'Басқа', 'reactants': ('Zn', 'NaOH', 'H2O'), 'products': ('Na2[Zn(OH)4]', 'H2'), 'equation': "Zn + 2NaOH + 2H2O -> Na2[Zn(OH)4] + H2"},
}


# --- "Дұрыс/Бұрыс" Викторинасына арналған деректер ---
TRUE_FALSE_QUIZ_QUESTIONS = [
    ("NaOH + HCl -> NaCl + H2O реакциясы бейтараптану реакциясы болып табылады.", True, None),
    ("Күкірт қышқылының формуласы - H2SO4.", True, None),
    ("Метан (CH4) жанғанда иіс газы мен су түзіледі.", False, "Метан жанғанда көмірқышқыл газы (CO2) мен су түзіледі."),
    ("2H2 + O2 -> 2H2O реакциясы дұрыс теңестірілген.", True, None),
    ("H2 + O2 -> H2O реакциясы дұрыс теңестірілген.", False, "H2 + O2 -> H2O реакциясы теңестірілмеген. Дұрысы: 2H2 + O2 -> 2H2O."),
    ("Мырыш (Zn) мысты (Cu) CuSO4 ерітіндісінен ығыстырып шығарады.", True, None),
    ("Алтын (Au) тұз қышқылымен (HCl) әрекеттеседі.", False, "Алтын - белсенділігі төмен металл және тұз қышқылымен әрекеттеспейді."),
    ("Су қышқыл болып табылады.", False, "Су - амфотерлі зат, яғни реакцияға байланысты қышқылдық та, негіздік те қасиет көрсете алады."),
    ("Лакмус сілтілік ортада көк түске боялады.", True, None),
    ("Оттектің (O) атомдық нөмірі - 16.", False, "Оттектің атомдық нөмірі - 8, ал атомдық массасы шамамен 16-ға тең."),
    ("Молярлық масса заттың бір молінің грамммен алынған массасын көрсетеді (г/моль).", True, None),
    ("Менделеев кестесіндегі период нөмірі валенттік электрондар санын көрсетеді.", False, "Топ нөмірі (негізгі топша элементтері үшін) валенттік электрондар санын көрсетеді."),
    ("Оксидтер - екі элементтен тұратын күрделі заттар, олардың бірі - тотығу дәрежесі -2 болатын оттек.", True, None),
    ("Құрамында сутегі бар барлық заттар қышқылдар болып табылады.", False, "Құрамында сутегі бар, бірақ қышқыл болып табылмайтын заттарға мысал: метан (CH4) және аммиак (NH3)."),
    ("Химиялық реакцияның жылдамдығы әдетте температураны жоғарылатқанда артады.", True, None),
    ("Ингибиторлар - химиялық реакцияны тездететін заттар.", False, "Ингибиторлар - химиялық реакцияны баяулататын заттар."),
    ("Фенолфталеин сілтілік ортада таңқурай түске боялады.", True, None),
    ("Атом тек протондар мен электрондардан тұрады.", False, "Атом протондардан, нейтрондардан және электрондардан тұрады (нейтрондары жоқ сутегі-1 изотопын қоспағанда)."),
    ("Изотоптар - бұл нейтрондар саны әртүрлі бір элементтің атомдары.", True, None),
    ("Қосылу реакциясы - бір күрделі заттан бірнеше басқа заттар түзілетін реакция.", False, "Қосылу реакциясы - бірнеше жай немесе күрделі заттан бір анағұрлым күрделі зат түзілетін реакция. Кері тұжырым айырылу реакциясы үшін дұрыс."),
    ("Моль - зат мөлшерінің өлшем бірлігі.", True, None),
    ("Қышқыл ерітіндісі мен сілті ерітіндісін араластырғанда әрқашан тұнба түзіледі.", False, "Қышқыл мен сілті ерітіндісін араластырғанда тұз бен су түзіледі. Тұз ерігіш те, ерімейтін де болуы мүмкін."),
    ("Электролиттер - ерітінділері немесе балқымалары электр тогын өткізетін заттар.", True, None),
    ("Кремний (Si) - типтік металл.", False, "Кремний бейметалл болып табылады, дәлірек айтсақ - жартылай металл (немесе металлоид)."),
    ("Коваленттік байланыс ортақ электрон жұптары есебінен түзіледі.", True, None),
    ("Азот N2 молекуласында үштік коваленттік байланыс бар.", True, None),
    ("Сілтілер - суда еритін негіздер.", True, None),
    ("'Күміс айна' реакциясы альдегидтерді анықтау үшін қолданылады.", True, None),
    ("Мұнай жеке химиялық зат болып табылады.", False, "Мұнай - әртүрлі көмірсутектердің күрделі қоспасы."),
    ("Алмас пен графит әртүрлі химиялық элементтердің атомдарынан тұрады.", False, "Алмас пен графит - көміртектің аллотропиялық түрөзгерістері, яғни бір элементтің – көміртектің атомдарынан тұрады."),
    ("Натрийдің атомдық нөмірі - 11.", True, None),
    ("Су молекуласы бір сутек атомынан және екі оттек атомынан тұрады.", False, "Су молекуласы екі сутек атомынан және бір оттек атомынан тұрады (H2O)."),
    ("Алюминий - жер қыртысындағы ең көп таралған металл.", True, None),
    ("Инертті газдар әдетте өте химиялық белсенді.", False, "Инертті газдар толтырылған сыртқы электрондық қабатына байланысты төмен химиялық белсенділікке ие."),
    ("pH мәні 7-ге тең ерітінді қышқылдық ортаны көрсетеді.", False, "pH мәні 7-ге тең ерітінді бейтарап ортаны көрсетеді. Қышқылдық ортаның pH < 7, ал сілтіліктің - pH > 7."),
    ("pH 3 ерітіндісі pH 5 ерітіндісіне қарағанда қышқылдырақ.", True, None),
    ("Оттек көптеген қосылыстарында -2 тотығу дәрежесін көрсетеді.", True, None),
    ("Протон оң зарядқа ие.", True, None),
    ("Нейтронның электр заряды жоқ.", True, None),
    ("Электронның массасы протонның массасынан едәуір үлкен.", False, "Электронның массасы протонның массасынан едәуір аз."),
]

# --- "Көп таңдау" Викторинасына арналған деректер ---
MULTIPLE_CHOICE_QUIZ_QUESTIONS = [
    {
        "question": "Судың химиялық таңбасы қандай?",
        "options": ["H2O", "O2H", "HO2", "H2"],
        "correct_answer_index": 0,
        "explanation": "Су екі сутек атомынан және бір оттек атомынан тұрады, сондықтан оның химиялық таңбасы - H2O."
    },
    {
        "question": "Адамның асқазан сөлінде қандай қышқыл бар?",
        "options": ["Күкірт", "Азот", "Тұз", "Сірке"],
        "correct_answer_index": 2,
        "explanation": "Асқазан сөлінде тамақты қорытуға көмектесетін тұз қышқылы (HCl) бар."
    },
    {
        "question": "Қай инертті газ ең жеңіл болып табылады?",
        "options": ["Гелий", "Неон", "Аргон", "Криптон"],
        "correct_answer_index": 0,
        "explanation": "Гелий (He) атомдық нөмірі 2 және ең жеңіл инертті газ болып табылады."
    },
    {
        "question": "Қай формула көміртек(IV) оксидіне сәйкес келеді?",
        "options": ["CO", "CO2", "C2O", "CH4"],
        "correct_answer_index": 1,
        "explanation": "Көміртек(IV) оксиді көмірқышқыл газы ретінде де белгілі, оның формуласы - CO2, мұнда көміртектің тотығу дәрежесі +4."
    },
    {
        "question": "Қай металл болаттың негізгі компоненті болып табылады?",
        "options": ["Мыс", "Алюминий", "Темір", "Мырыш"],
        "correct_answer_index": 2,
        "explanation": "Болат - темір негізіндегі қорытпа, оған көміртек және басқа элементтер қосылған."
    },
    {
        "question": "Қышқыл мен негіз әрекеттескенде не түзіледі?",
        "options": ["Тұз және су", "Оксид және су", "Негіз және су", "Қышқыл және тұз"],
        "correct_answer_index": 0,
        "explanation": "Қышқыл мен негіз арасындағы реакция бейтараптану реакциясы деп аталады, нәтижесінде тұз бен су түзіледі."
    },
    {
        "question": "Төмендегі элементтердің қайсысы сілтілік металл?",
        "options": ["Кальций", "Магний", "Натрий", "Алюминий"],
        "correct_answer_index": 2,
        "explanation": "Натрий (Na) сілтілік металдарға жатады (Менделеев кестесінің 1-тобы)."
    },
    {
        "question": "Оттек (O2) молекуласындағы атомдар арасында қандай байланыс түзіледі?",
        "options": ["Иондық", "Ковалентті дара", "Ковалентті қос", "Металдық"],
        "correct_answer_index": 2,
        "explanation": "Оттек молекуласында екі оттек атомы ковалентті қос байланыспен байланысқан."
    },
    {
        "question": "Қай ерітіндінің pH мәні 7-ден жоғары?",
        "options": ["Қышқылдық", "Бейтарап", "Сілтілік", "Буферлік"],
        "correct_answer_index": 2,
        "explanation": "Сілтілік ерітінділердің pH мәні 7-ден жоғары болады."
    },
    {
        "question": "Өнеркәсіпте оттекті алу үшін қандай процесс қолданылады?",
        "options": ["Судың электролизі", "Ауаны фракциялық айдау", "Мұнай крекингі", "Сутек пен азот оксидінен синтездеу"],
        "correct_answer_index": 1,
        "explanation": "Өнеркәсіпте оттекті сұйық ауаны фракциялық айдау әдісімен алады."
    },
]

# --- Дәрістерге арналған деректер (HTML FORMAT, БЕЗ SUB/SUP) ---
LECTURES_DATA = {
    "intro_chem": {
        "title": "Химияға кіріспе",
        "content": (
            "<b>📚 Химияға кіріспе</b>\n\n"
            "Химия — бұл заттар, олардың қасиеттері, құрылысы және айналымдары, "
            "сондай-ақ осы айналымдар бағынатын заңдар туралы ғылым.\n\n"
            "Негізгі ұғымдар:\n"
            "- <b>Атом:</b> Химиялық элементтің ең кіші бөлшегі.\n"
            "- <b>Молекула:</b> Екі немесе одан да көп атомнан тұратын бөлшек.\n"
            "- <b>Химиялық элемент:</b> Ядро заряды бірдей атомдар жиынтығы.\n"
            "- <b>Зат:</b> Физикалық денелер неден тұратыны.\n\n"
            "Химия атомдардың молекулаларға қалай қосылатынын, заттардың бір-бірімен қалай әрекеттесетінін, "
            "және бұл процестерді тәжірибеде қалай қолдануға болатынын зерттейді."
        )
    },
    "periodic_law": {
        "title": "Периодтық Заң",
        "content": (
            "<b>📚 Периодтық Заң және Менделеев Кестесі</b>\n\n"
            "Д.И. Менделеев 1869 жылы ашқан.\n"
            "<b>Тұжырымдамасы:</b> Химиялық элементтердің қасиеттері, сондай-ақ олардың қосылыстарының формалары мен қасиеттері "
            "олардың атомдарының ядро зарядтарының шамасына периодты түрде тәуелді болады.\n\n"
            "<b>Менделеев кестесі:</b> Заңның графикалық көрінісі. Элементтер атомдық нөмірлерінің өсуі бойынша орналасқан "
            "және периодтар мен топтарға топтастырылған.\n"
            "- <b>Период:</b> Элементтердің көлденең қатары.\n"
            "- <b>Топ:</b> Ұқсас қасиеттері бар элементтердің тік бағаны.\n\n"
            "Кесте элементтер мен олардың қосылыстарының қасиеттерін болжауға мүмкіндік береді."
        )
    },
    "reaction_types": {
       "title": "Химиялық Реакциялардың Түрлері",
        "content": (
            "<b>📚 Химиялық Реакциялардың Негізгі Түрлері</b>\n\n"
            "Реагенттер мен өнімдердің саны мен құрамы бойынша жіктеу:\n\n"
            "1️⃣ <b>Қосылу реакциялары:</b> A + B → AB\n"
            "   Бірнеше заттан бір күрделі зат түзіледі.\n"
            "   <i>Мысал:</i> 2H2 + O2 → 2H2O\n\n" # H2O вместо H<sub>2</sub>O
            "2️⃣ <b>Айырылу реакциялары:</b> AB → A + B\n"
            "   Бір күрделі заттан бірнеше жаңа зат түзіледі.\n"
            "   <i>Мысал:</i> CaCO3 → CaO + CO2\n\n" # CaCO3, CO2 вместо <sub>
            "3️⃣ <b>Орынбасу реакциялары:</b> A + BC → AC + B\n"
            "   Жай заттың атомдары күрделі заттағы элемент атомдарын алмастырады.\n"
            "   <i>Мысал:</i> Zn + CuSO4 → ZnSO4 + Cu\n\n" # CuSO4, ZnSO4 вместо <sub>
            "4️⃣ <b>Алмасу реакциялары:</b> AB + CD → AD + CB\n"
            "   Екі күрделі зат құрамдас бөліктерімен алмасады.\n"
            "   <i>Мысал:</i> NaOH + HCl → NaCl + H2O" # H2O вместо <sub>
         )
     },
    "atom_structure": {
        "title": "Атом құрылысы",
        "content": (
            "<b>📚 Атом құрылысы</b>\n\n"
            "Атом - химиялық элементтің ең кіші бөлшегі.\n"
            "Ол орталық <b>ядродан</b> және оны айнала қозғалатын <b>электрондардан</b> тұрады.\n\n"
            "- <b>Ядро:</b> Оң зарядталған <b>протондардан</b> (p+) және заряды жоқ <b>нейтрондардан</b> (n0) тұрады.\n" # p+, n0 вместо <sup>
            "- <b>Электрондар (e-):</b> Теріс зарядталған және ядроны белгілі бір <b>электрондық қабаттарда</b> (энергетикалық деңгейлерде) айналады.\n\n" # e- вместо <sup>
            "Атомдағы протондар саны элементтің <b>атомдық нөмірін</b> (Z) анықтайды.\n"
            "Протондар мен нейтрондардың жалпы саны <b>массалық санды</b> (A) береді."
        )
    },
    "chemical_bonding": {
        "title": "Химиялық байланыс",
        "content": (
            "<b>📚 Химиялық байланыс</b>\n\n"
            "Атомдардың молекулалар мен кристалдарға бірігу тәсілі.\n"
            "Негізгі түрлері:\n"
            "1.  <b>Иондық:</b> Металл мен бейметалл атомдары арасында электрондарды беру-алу арқылы түзіледі (мыс., <code>NaCl</code>).\n"
            "2.  <b>Коваленттік:</b> Атомдар арасында электрондарды ортақтастыру арқылы түзіледі.\n"
            "    - <i>Полярсыз:</i> Бірдей бейметалл атомдары арасында (мыс., <code>H2</code>, <code>O2</code>).\n" # H2, O2 вместо <sub>
            "    - <i>Полярлы:</i> Әртүрлі бейметалл атомдары арасында (мыс., <code>H2O</code>, <code>HCl</code>).\n" # H2O вместо <sub>
            "3.  <b>Металдық:</b> Металл атомдары мен ортақ электрондар арасында түзіледі.\n"
            "4.  <b>Сутектік:</b> Сутек атомы мен электртерістілігі жоғары элемент (O, N, F) арасындағы ерекше байланыс."
        )
    },
    "mole_concept": {
        "title": "Моль ұғымы",
        "content": (
            "<b>📚 Моль ұғымы және Авогадро саны</b>\n\n"
            "<b>Моль</b> - зат мөлшерінің өлшем бірлігі.\n"
            "Бір моль затта <b>Авогадро санына (N_A)</b> тең құрылымдық бөлшектер (атомдар, молекулалар, иондар) болады.\n\n"
            "<code>N_A ≈ 6.022 * 10^23 моль^-1</code>\n\n" # Используем ^ вместо <sup>
            "Молярлық масса (M) - бір моль заттың граммен алынған массасы (г/моль). Сандық мәні салыстырмалы молекулалық (немесе атомдық) массаға тең.\n\n"
            "Бұл ұғымдар химиялық есептеулер үшін өте маңызды."
        )
    },
    "periodic_trends": {
        "title": "Периодтық заңдылықтар",
        "content": (
            "<b>📚 Периодтық кестедегі заңдылықтар</b>\n\n"
            "Элементтердің қасиеттері кестеде периодты түрде өзгереді:\n"
            "- <b>Атом радиусы:</b>\n"
            "    - Топ бойынша жоғарыдан төмен <i>артады</i>.\n"
            "    - Период бойынша солдан оңға <i>кемиді</i>.\n"
            "- <b>Иондану энергиясы</b> (электронды бөліп алуға қажет энергия):\n"
            "    - Топ бойынша жоғарыдан төмен <i>кемиді</i>.\n"
            "    - Период бойынша солдан оңға <i>артады</i>.\n"
            "- <b>Электртерістілік</b> (байланыстағы электрондарды тарту қабілеті):\n"
            "    - Топ бойынша жоғарыдан төмен <i>кемиді</i>.\n"
            "    - Период бойынша солдан оңға <i>артады</i>.\n\n"
            "Бұл заңдылықтар элементтердің химиялық белсенділігін болжауға көмектеседі."
        )
    },
    "oxidation_states": {
        "title": "Тотығу дәрежелері және ТТР",
        "content": (
            "<b>📚 Тотығу дәрежелері және ТТР</b>\n\n"
            "<b>Тотығу дәрежесі (т.д.)</b> - атомның шартты заряды, егер байланыс электрондары толығымен электртерістілігі жоғары атомға ауысады деп есептесек.\n\n"
            "<b>Тотығу-тотықсыздану реакциялары (ТТР)</b> - элементтердің тотығу дәрежелері өзгере жүретін реакциялар.\n"
            "- <b>Тотығу:</b> Электрондарды беру процесі (т.д. <i>жоғарылайды</i>).\n"
            "- <b>Тотықсыздану:</b> Электрондарды қосып алу процесі (т.д. <i>төмендейді</i>).\n"
            "- <b>Тотықтырғыш:</b> Электрондарды қосып алатын зат (өзі <i>тотықсызданады</i>).\n"
            "- <b>Тотықсыздандырғыш:</b> Электрондарды беретін зат (өзі <i>тотығады</i>)."
        )
    },
    "acids_bases_ph": {
        "title": "Қышқылдар, Негіздер, pH",
        "content": (
            "<b>📚 Қышқылдар, Негіздер және pH</b>\n\n"
            "- <b>Қышқылдар:</b> Сулы ерітіндіде сутек иондарын (H+) бөлетін заттар (мыс., <code>HCl</code>, <code>H2SO4</code>). Қышқыл дәмді, индикатор түсін өзгертеді (лакмус - қызыл).\n" # H+, H2SO4 вместо sup/sub
            "- <b>Негіздер:</b> Сулы ерітіндіде гидроксид иондарын (OH-) бөлетін немесе протонды (H+) қосып алатын заттар (мыс., <code>NaOH</code>, <code>NH3</code>). Сабын тәрізді, индикатор түсін өзгертеді (лакмус - көк, фенолфталеин - таңқурай).\n" # OH-, H+, NH3 вместо sup/sub
            "- <b>pH:</b> Ерітіндінің қышқылдығын немесе негіздігін көрсететін шама.\n"
            "    - pH &lt; 7 - Қышқылдық орта\n"
            "    - pH = 7 - Бейтарап орта\n"
            "    - pH &gt; 7 - Сілтілік (негіздік) орта\n"
            "- <b>Бейтараптану реакциясы:</b> Қышқыл мен негіздің әрекеттесіп, тұз бен су түзуі (Қышқыл + Негіз → Тұз + Су)."
        )
    },
    "stoichiometry_basics": {
        "title": "Стехиометрия негіздері",
        "content": (
            "<b>📚 Стехиометрия негіздері</b>\n\n"
            "<b>Стехиометрия</b> - химиялық реакцияларға қатысатын реагенттер мен өнімдердің массалық және көлемдік қатынастарын зерттейтін сала.\n\n"
            "Негізгі қадамдар:\n"
            "1.  Реакция теңдеуін дұрыс жазу және <b>теңестіру</b>.\n"
            "2.  Белгілі заттың <b>зат мөлшерін (моль)</b> табу (масса, көлем немесе бөлшектер саны арқылы).\n"
            "3.  Реакция теңдеуіндегі <b>коэффициенттерді</b> пайдаланып, ізделетін заттың зат мөлшерін пропорция арқылы табу.\n"
            "4.  Табылған зат мөлшерінен ізделетін шаманы (масса, көлем, т.б.) есептеу.\n\n"
            "<i>Мысалы:</i> 2H2 + O2 → 2H2O теңдеуі 2 моль сутек 1 моль оттекпен әрекеттесіп, 2 моль су түзетінін көрсетеді." # H2, O2, H2O вместо <sub>
        )
    },
    "solutions_concentration": {
        "title": "Ерітінділер және концентрация",
        "content": (
            "<b>📚 Ерітінділер және концентрация</b>\n\n"
            "<b>Ерітінді</b> - еріткіштен және бір немесе бірнеше еріген заттан тұратын біртекті (гомогенді) жүйе.\n\n"
            "<b>Концентрация</b> - ерітіндідегі немесе еріткіштегі еріген заттың мөлшерін сипаттайтын шама.\n"
            "Жиі қолданылатын түрлері:\n"
            "- <b>Массалық үлес (ω):</b> Еріген зат массасының жалпы ерітінді массасына қатынасы (пайызбен немесе үлеспен өрнектеледі).\n"
            "  <code>ω = (m(еріген зат) / m(ерітінді)) * 100%</code>\n"
            "- <b>Молярлық концентрация (C_M):</b> Ерітіндінің бір литріндегі еріген заттың моль саны (моль/л).\n"
            "  <code>C_M = n(еріген зат) / V(ерітінді)</code>"
        )
    },
    "states_of_matter": {
        "title": "Заттың агрегаттық күйлері",
        "content": (
            "<b>📚 Заттың агрегаттық күйлері</b>\n\n"
            "Заттар әртүрлі температура мен қысымда негізгі үш агрегаттық күйде бола алады:\n"
            "1.  <b>Қатты:</b>\n"
            "    - Белгілі пішіні мен көлемі бар.\n"
            "    - Бөлшектер тығыз орналасқан, тек тербеліс жасайды.\n"
            "2.  <b>Сұйық:</b>\n"
            "    - Белгілі көлемі бар, бірақ пішіні тұрақсыз (ыдыс пішінін алады).\n"
            "    - Бөлшектер бір-біріне жақын, бірақ орын ауыстыра алады.\n"
            "3.  <b>Газ:</b>\n"
            "    - Белгілі пішіні де, көлемі де жоқ (берілген көлемді толық алады).\n"
            "    - Бөлшектер арасы алшақ, ретсіз қозғалыста болады.\n\n"
            "Бір агрегаттық күйден екіншісіне ауысу температура мен қысымның өзгеруіне байланысты."
        )
    },
    "organic_intro": {
        "title": "Органикалық химияға кіріспе",
        "content": (
            "<b>📚 Органикалық химияға кіріспе</b>\n\n"
            "<b>Органикалық химия</b> - көміртек қосылыстарының және олардың айналымдарының химиясы.\n\n"
            "Ерекшеліктері:\n"
            "- Негізгі элемент - <b>көміртек (C)</b>.\n"
            "- Көміртек атомдары бір-бірімен байланысып, ұзын <b>тізбектер</b> мен <b>сақиналар</b> түзе алады.\n"
            "- Құрамында жиі кездесетін басқа элементтер: <b>сутек (H), оттек (O), азот (N)</b>.\n\n"
            "<b>Көмірсутектер</b> - тек көміртек пен сутектен тұратын ең қарапайым органикалық қосылыстар (мыс., метан <code>CH4</code>, этан <code>C2H6</code>)." # CH4, C2H6 вместо <sub>
        )
    }

} # <-- ОСЫ ЕҢ СОҢҒЫ ЖАҚШАНЫ ҚОСА КӨШІРІҢІЗ!


# --- Пайдаланушылардың прогресін сақтауға арналған сөздік ---
user_progress = {}

# --- Көмекші функциялар ---
def build_main_menu() -> InlineKeyboardMarkup:
    """Негізгі мәзір пернетақтасын жасайды."""
    keyboard = [
        [InlineKeyboardButton("⚖️ Реакцияны табу", callback_data='find_reaction')],
        [InlineKeyboardButton("🕹️ Викторина", callback_data='open_quiz_menu')],
        [InlineKeyboardButton("🧪 Молярлық масса калькуляторы", callback_data='molar_mass_calc')],
        [InlineKeyboardButton("📊 Менің прогресім", callback_data='show_progress')],
        [InlineKeyboardButton("ℹ️ Зат туралы анықтама", callback_data='info_compound')],
        [InlineKeyboardButton("⚛️ Элементті іздеу", callback_data='find_element')],
        [InlineKeyboardButton("🖼️ Менделеев кестесі", callback_data='periodic_table_image')],
        [InlineKeyboardButton("📚 Дәрістер", callback_data='show_lectures')],
        [InlineKeyboardButton("❓ Көмек", callback_data='help')],
    ]
    return InlineKeyboardMarkup(keyboard)

def build_quiz_menu() -> InlineKeyboardMarkup:
    """Викторина таңдау мәзірінің пернетақтасын жасайды."""
    keyboard = [
        [InlineKeyboardButton("✔️ Дұрыс/Бұрыс", callback_data='quiz_true_false')],
        [InlineKeyboardButton("❓ Көп таңдау", callback_data='quiz_multiple_choice')],
        [InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_lecture_menu() -> InlineKeyboardMarkup:
    """Қолжетімді дәрістер тізімі бар пернетақтаны жасайды."""
    keyboard = []
    for key, data in LECTURES_DATA.items():
        keyboard.append([InlineKeyboardButton(data['title'], callback_data=f'lecture_{key}')])
    keyboard.append([InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu')])
    return InlineKeyboardMarkup(keyboard)


def calculate_molar_mass(formula):
    """Химиялық формула бойынша молярлық массаны есептейді."""
    mass = 0
    elements = re.findall(r'([A-Z][a-z]?)(\d*)', formula)
    if not elements:
        return "❌ Қате: Формуланы тану мүмкін болмады. Элемент таңбаларының дұрыс жазылғанына көз жеткізіңіз (мысалы, H2O, NaCl)."

    parsed_elements = []
    parsing_ok = True
    for element, count in elements:
        if element in ELEMENTS_DATA:
            atomic_mass = ELEMENTS_DATA[element]['atomic_mass']
            num_atoms = int(count) if count else 1
            mass += atomic_mass * num_atoms
            parsed_elements.append(f"{element}{count}")
        else:
            parsing_ok = False
            return f"❌ Қате: Формулада белгісіз элемент '{element}'."

    if parsing_ok and "".join(parsed_elements) != formula:
         # Check if the formula contains brackets or complex structures not handled by the simple regex
         if '(' in formula or '[' in formula:
             # For complex formulas, return the calculated mass but warn about potential inaccuracies
             logger.warning(f"Формула '{formula}' күрделі болуы мүмкін. Есептеу дәл болмауы мүмкін.")
             # Return the calculated mass anyway, as simple parts might be correct
         else:
            # If no complex structures, it's likely a parsing error
            return f"❌ Қате: '{formula}' формуласын толық талдау мүмкін болмады. Форматты тексеріңіз."

    # Return result using HTML for consistency
    return f"<b>{formula}</b> молярлық массасы: <code>{mass:.3f}</code> г/моль"


# --- Прогресті көрсету ---
async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Пайдаланушының викториналар бойынша статистикасын көрсетеді."""
    query = update.callback_query
    user_id = query.from_user.id
    progress = user_progress.get(user_id, {})
    tf_correct = progress.get('true_false_correct', 0)
    tf_total = tf_correct + progress.get('true_false_incorrect', 0)
    mc_correct = progress.get('multiple_choice_correct', 0)
    mc_total = mc_correct + progress.get('multiple_choice_incorrect', 0)

    tf_percent = (tf_correct / tf_total * 100) if tf_total > 0 else 0
    mc_percent = (mc_correct / mc_total * 100) if mc_total > 0 else 0

    message = f"📊 <b>Викториналардағы сіздің прогресіңіз:</b>\n\n"
    message += f"✔️ Дұрыс/Бұрыс: {tf_total} сұрақтан {tf_correct} дұрыс жауап берілді ({tf_percent:.1f}%)\n"
    message += f"❓ Көп таңдау: {mc_total} сұрақтан {mc_correct} дұрыс жауап берілді ({mc_percent:.1f}%)\n"

    await query.edit_message_text(message, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu')]]))

# --- Команда өңдеушілері ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start командасы кезінде сәлемдесу хабарламасын жібереді."""
    user = update.effective_user
    await update.message.reply_html(
        rf"Сәлем, {user.mention_html()}! 👋 Мен сіздің химия бойынша көмекшіңізбін."
        "\n\nМен заттар, элементтер, химиялық реакциялар туралы ақпарат табуға, "
        "молярлық массаны есептеуге, сондай-ақ білімді тексеру үшін дәрістер мен викториналар ұсынуға көмектесе аламын.\n\n"
        "Бастау үшін төмендегі батырманы басыңыз.",
        reply_markup=build_main_menu(),
        disable_web_page_preview=True # Добавлено
    )

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/menu командасы бойынша негізгі мәзірді жібереді."""
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text('📌 Негізгі мәзір:', reply_markup=build_main_menu())
        except Exception as e:
             logger.warning(f"menu_command ішінде хабарламаны өңдеу қатесі: {e}. Жаңа хабарлама жіберу.")
             # Ensure update.effective_chat.id exists before sending message
             chat_id = update.effective_chat.id if update.effective_chat else None
             if chat_id:
                 await context.bot.send_message(chat_id=chat_id, text='📌 Негізгі мәзір:', reply_markup=build_main_menu())
             else:
                 logger.error("menu_command ішінде chat_id табылмады.")

    else:
        await update.message.reply_text('📌 Негізгі мәзір:', reply_markup=build_main_menu())


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/help командасы бойынша анықтамалық хабарлама жібереді."""
    # Используем HTML для единообразия и лучших возможностей форматирования
    help_text = (
        "<b>Қолжетімді функциялар:</b>\n\n"
        "📚 <b>Дәрістер:</b> Тақырыптар бойынша қысқаша теориялық материалдар.\n"
        "⚖️ <b>Реакцияны табу:</b> Реагенттерді енгізіңіз (мысалы, <code>H2 + O2</code>), мен теңдеуді көрсетемін.\n"
        "🕹️ <b>Викторина:</b> Біліміңізді екі форматта тексеріңіз (Дұрыс/Бұрыс, Көп таңдау).\n"
        "🧪 <b>Молярлық масса калькуляторы:</b> Формуланы енгізіңіз (мысалы, <code>H2SO4</code>), мен массаны есептеймін.\n"
        "📊 <b>Менің прогресім:</b> Викториналардағы жауаптарыңыздың статистикасы.\n"
        "ℹ️ <b>Зат туралы анықтама:</b> Ол туралы білу үшін формуланы енгізіңіз (мысалы, <code>H2O</code>).\n"
        "⚛️ <b>Элементті іздеу:</b> Элементті табу үшін таңбасын (<code>Fe</code>) немесе нөмірін (<code>26</code>) енгізіңіз.\n"
        "🖼️ <b>Менделеев кестесі:</b> Кестенің суретін көрсетеді.\n\n"
        "<b>Командалар:</b>\n"
        "/start - Ботты қайта іске қосу\n"
        "/menu - Негізгі мәзірді ашу\n"
        "/help - Осы анықтаманы көрсету"
    )
    reply_markup_button = InlineKeyboardMarkup([[InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu')]])
    reply_markup_command = InlineKeyboardMarkup([[InlineKeyboardButton("✅ Түсінікті", callback_data='main_menu')]])

    if update.callback_query:
         await update.callback_query.edit_message_text(
             help_text,
             parse_mode=ParseMode.HTML, # Используем HTML
             reply_markup=reply_markup_button,
             disable_web_page_preview=True # Добавлено
         )
    else:
         await update.message.reply_text(
             help_text,
             parse_mode=ParseMode.HTML, # Используем HTML
             reply_markup=reply_markup_command,
             disable_web_page_preview=True # Добавлено
         )

async def info_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/info <формула> командасын өңдейді."""
    if not context.args:
        await update.message.reply_html("Заттың формуласын /info командасынан кейін көрсетіңіз (мысалы, /info H2O).", disable_web_page_preview=True)
        return

    formula = context.args[0].upper()
    if formula in COMPOUNDS_DATA:
        data = COMPOUNDS_DATA[formula]
        response = f"🧪 <b>{data.get('name', 'Атауы көрсетілмеген')} ({formula})</b>\n"
        if 'type' in data: response += f"Түрі: {data['type']}\n"
        if 'properties' in data: response += f"Қасиеттері: {data['properties']}\n"
        if 'application' in data: response += f"Қолданылуы: {data['application']}"
        await update.message.reply_html(response, disable_web_page_preview=True)
    else:
        await update.message.reply_html(f"❌ '{formula}' формуласы бар зат анықтамалықта табылмады.", disable_web_page_preview=True)

async def element_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/element <таңба немесе нөмір> командасын өңдейді."""
    if not context.args:
        await update.message.reply_html("Элементтің таңбасын немесе атомдық нөмірін /element командасынан кейін көрсетіңіз (мысалы, /element Fe немесе /element 26).", disable_web_page_preview=True)
        return

    query_arg = context.args[0].strip()
    found = False
    response = ""
    query_symbol = query_arg.title()

    if query_symbol in ELEMENTS_DATA:
        data = ELEMENTS_DATA[query_symbol]
        response = (
            f"⚛️ <b>{data.get('name', 'Аты табылмады')} ({query_symbol})</b>\n"
            f"Атомдық нөмірі: {data.get('atomic_number', 'белгісіз')}\n"
            f"Салыстырмалы атомдық массасы: {data.get('atomic_mass', 'белгісіз')}"
        )
        found = True
    else:
        try:
            atomic_number = int(query_arg)
            for symbol, data in ELEMENTS_DATA.items():
                if data.get('atomic_number') == atomic_number:
                    response = (
                        f"⚛️ <b>{data.get('name', 'Аты табылмады')} ({symbol})</b>\n"
                        f"Атомдық нөмірі: {data.get('atomic_number', 'белгісіз')}\n"
                        f"Салыстырмалы атомдық массасы: {data.get('atomic_mass', 'белгісіз')}"
                    )
                    found = True
                    break
            if not found:
                 response = f"❌ Атомдық нөмірі '{atomic_number}' элемент табылмады."
        except ValueError:
            response = f"❌ '{query_arg}' танылмады. Элементтің таңбасын (мысалы, Fe) немесе оның атомдық нөмірін (мысалы, 26) енгізіңіз."

    await update.message.reply_html(response, disable_web_page_preview=True)


async def molar_mass_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/molar_mass <формула> командасын өңдейді."""
    if not context.args:
        await update.message.reply_html("Химиялық формуланы /molar_mass командасынан кейін енгізіңіз (мысалы, /molar_mass H2O).", disable_web_page_preview=True)
        return

    formula = context.args[0]
    result = calculate_molar_mass(formula)
    await update.message.reply_html(result, reply_markup=build_main_menu(), disable_web_page_preview=True)


# --- "Дұрыс/Бұрыс" Викторинасының логикасы ---
async def start_true_false_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Дұрыс/Бұрыс викторинасының раундын бастайды."""
    query = update.callback_query
    if not TRUE_FALSE_QUIZ_QUESTIONS:
        text = "Кешіріңіз, 'Дұрыс/Бұрыс' викторинасына арналған сұрақтар әлі қосылмаған."
        reply_markup = build_quiz_menu()
        if query: await query.edit_message_text(text, reply_markup=reply_markup)
        else: await update.message.reply_text(text, reply_markup=reply_markup)
        return

    question_data = random.choice(TRUE_FALSE_QUIZ_QUESTIONS)
    question_text, correct_answer_bool, explanation = question_data

    context.user_data['quiz_type'] = 'true_false'
    context.user_data['quiz_correct_answer'] = correct_answer_bool
    context.user_data['quiz_question_text'] = question_text
    context.user_data['quiz_explanation'] = explanation
    logger.info(f"TF_Quiz: Сұрақ қойылды: '{question_text}', Жауабы: {correct_answer_bool}")

    keyboard = [
        [
            InlineKeyboardButton("✔️ Дұрыс", callback_data='quiz_answer_true'),
            InlineKeyboardButton("❌ Бұрыс", callback_data='quiz_answer_false')
        ],
        [InlineKeyboardButton("« Викторина мәзіріне", callback_data='open_quiz_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # Используем HTML для вопроса
    text_to_send = f"<b>Сұрақ (Дұрыс/Бұрыс):</b>\n\n{question_text}"

    message_to_edit = query.message if query else update.message
    try:
        if query:
            await query.edit_message_text(text_to_send, reply_markup=reply_markup, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        else:
            await update.message.reply_html(text_to_send, reply_markup=reply_markup, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"TF сұрағын жіберу кезіндегі қате: {e}", exc_info=True)
        chat_id = message_to_edit.chat_id if message_to_edit else None
        if chat_id:
            await context.bot.send_message(
                chat_id=chat_id,
                text="Жаңарту кезінде қате пайда болды. Міне, жаңа сұрақ:",
                reply_markup=build_quiz_menu()
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text=text_to_send,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )

async def handle_true_false_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Дұрыс/Бұрыс сұрағына жауапты өңдейді."""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if 'quiz_correct_answer' not in context.user_data or context.user_data.get('quiz_type') != 'true_false':
        await query.edit_message_text(
            "🤔 Ой, сұрақты ұмытып қалдым немесе бірдеңе дұрыс болмады. Мәзірге оралайық.",
            reply_markup=build_main_menu()
        )
        return

    user_answer_bool = (data == 'quiz_answer_true')
    correct_answer_bool = context.user_data['quiz_correct_answer']
    question_text = context.user_data['quiz_question_text']
    explanation = context.user_data['quiz_explanation']

    if user_id not in user_progress:
        user_progress[user_id] = {'true_false_correct': 0, 'true_false_incorrect': 0, 'multiple_choice_correct': 0, 'multiple_choice_incorrect': 0}

    feedback = ""
    if user_answer_bool == correct_answer_bool:
        feedback = "✅ <b>Дұрыс!</b>"
        user_progress[user_id]['true_false_correct'] += 1
    else:
        feedback = f"❌ <b>Бұрыс.</b> Дұрыс жауап: <b>{'Дұрыс' if correct_answer_bool else 'Бұрыс'}</b>."
        user_progress[user_id]['true_false_incorrect'] += 1
        if explanation:
            # Экранируем HTML символы в объяснении, если они есть
            safe_explanation = explanation.replace('<', '&lt;').replace('>', '&gt;')
            feedback += f"\n\n<i>Түсіндірме:</i> {safe_explanation}"

    keyboard = [
         [InlineKeyboardButton("🔄 Келесі сұрақ", callback_data='quiz_true_false')],
         [InlineKeyboardButton("📊 Прогресті көрсету", callback_data='show_progress')],
         [InlineKeyboardButton("« Викторина мәзіріне", callback_data='open_quiz_menu')]
     ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Используем HTML для ответа
    safe_question_text = question_text.replace('<', '&lt;').replace('>', '&gt;')
    await query.edit_message_text(
        f"<b>Сұрақ болды:</b>\n{safe_question_text}\n\n{feedback}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    context.user_data.pop('quiz_correct_answer', None)
    context.user_data.pop('quiz_question_text', None)
    context.user_data.pop('quiz_explanation', None)
    context.user_data.pop('quiz_type', None)

# --- "Көп таңдау" Викторинасының логикасы ---
async def start_multiple_choice_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Көп таңдау викторинасының раундын бастайды."""
    query = update.callback_query
    if not MULTIPLE_CHOICE_QUIZ_QUESTIONS:
        text = "Кешіріңіз, көп таңдау викторинасына арналған сұрақтар әлі қосылмаған."
        reply_markup = build_quiz_menu()
        if query: await query.edit_message_text(text, reply_markup=reply_markup)
        else: await update.message.reply_text(text, reply_markup=reply_markup)
        return

    question_data = random.choice(MULTIPLE_CHOICE_QUIZ_QUESTIONS)
    question_text = question_data['question']
    options = question_data['options']
    correct_answer_index = question_data['correct_answer_index']
    explanation = question_data['explanation']

    context.user_data['quiz_type'] = 'multiple_choice'
    context.user_data['mc_correct_answer_index'] = correct_answer_index
    context.user_data['mc_explanation'] = explanation
    context.user_data['mc_question_text'] = question_text
    context.user_data['mc_options'] = options
    logger.info(f"MC_Quiz: Сұрақ қойылды: '{question_text}', Жауабы: {options[correct_answer_index]} (индекс {correct_answer_index})")

    keyboard = []
    for index, option in enumerate(options):
        keyboard.append([InlineKeyboardButton(option, callback_data=f'quiz_mc_answer_{index}')])
    keyboard.append([InlineKeyboardButton("« Викторина мәзіріне", callback_data='open_quiz_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    # Используем HTML для вопроса
    text_to_send = f"<b>Сұрақ (Бір жауапты таңдаңыз):</b>\n\n{question_text}"

    message_to_edit = query.message if query else update.message
    try:
        if query:
            await query.edit_message_text(text_to_send, reply_markup=reply_markup, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        else:
            await update.message.reply_html(text_to_send, reply_markup=reply_markup, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"MC сұрағын жіберу кезіндегі қате: {e}", exc_info=True)
        chat_id = message_to_edit.chat_id if message_to_edit else None
        if chat_id:
            await context.bot.send_message(
                chat_id=chat_id,
                text="Жаңарту кезінде қате пайда болды. Міне, жаңа сұрақ:",
                reply_markup=build_quiz_menu()
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text=text_to_send,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )

async def handle_multiple_choice_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Көп таңдау сұрағына жауапты өңдейді."""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if 'mc_correct_answer_index' not in context.user_data or context.user_data.get('quiz_type') != 'multiple_choice':
        await query.edit_message_text(
            "🤔 Ой, сұрақты ұмытып қалдым немесе бірдеңе дұрыс болмады. Мәзірге оралайық.",
            reply_markup=build_main_menu()
        )
        return

    try:
        selected_answer_index = int(data.split('_')[-1])
    except (ValueError, IndexError):
        logger.error(f"MC жауабы үшін жарамсыз callback_data: {data}")
        await query.edit_message_text("Жауапты өңдеу кезінде қате пайда болды.", reply_markup=build_quiz_menu())
        return

    correct_answer_index = context.user_data['mc_correct_answer_index']
    question_text = context.user_data['mc_question_text']
    explanation = context.user_data['mc_explanation']
    options = context.user_data['mc_options']
    correct_answer_text = options[correct_answer_index] if 0 <= correct_answer_index < len(options) else "Белгісіз"

    if user_id not in user_progress:
        user_progress[user_id] = {'true_false_correct': 0, 'true_false_incorrect': 0, 'multiple_choice_correct': 0, 'multiple_choice_incorrect': 0}

    feedback = ""
    if selected_answer_index == correct_answer_index:
        feedback = "✅ <b>Дұрыс!</b>"
        user_progress[user_id]['multiple_choice_correct'] += 1
    else:
        selected_answer_text = options[selected_answer_index] if 0 <= selected_answer_index < len(options) else "Сіздің таңдауыңыз"
        # Экранируем HTML в ответах
        safe_selected = selected_answer_text.replace('<', '&lt;').replace('>', '&gt;')
        safe_correct = correct_answer_text.replace('<', '&lt;').replace('>', '&gt;')
        feedback = f"❌ <b>Бұрыс.</b>\nСіз таңдадыңыз: {safe_selected}\nДұрыс жауап: <b>{safe_correct}</b>."
        user_progress[user_id]['multiple_choice_incorrect'] += 1
        if explanation:
             safe_explanation = explanation.replace('<', '&lt;').replace('>', '&gt;')
             feedback += f"\n\n<i>Түсіндірме:</i> {safe_explanation}"

    keyboard = [
         [InlineKeyboardButton("🔄 Келесі сұрақ", callback_data='quiz_multiple_choice')],
         [InlineKeyboardButton("📊 Прогресті көрсету", callback_data='show_progress')],
         [InlineKeyboardButton("« Викторина мәзіріне", callback_data='open_quiz_menu')]
     ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Используем HTML для ответа
    safe_question_text = question_text.replace('<', '&lt;').replace('>', '&gt;')
    await query.edit_message_text(
        f"<b>Сұрақ болды:</b>\n{safe_question_text}\n\n{feedback}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    context.user_data.pop('mc_correct_answer_index', None)
    context.user_data.pop('mc_explanation', None)
    context.user_data.pop('mc_question_text', None)
    context.user_data.pop('mc_options', None)
    context.user_data.pop('quiz_type', None)


# --- Батырма өңдеушісі (CallbackQueryHandler) ---
# ИСПРАВЛЕНО: parse_mode=HTML для лекций, добавлено disable_web_page_preview
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Барлық Inline батырмалардың басылуын өңдейді."""
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f"Батырма басылды: {data}")

    # --- callback_data бойынша маршруттау ---

    if data == 'quiz_answer_true' or data == 'quiz_answer_false':
        await handle_true_false_answer(update, context)
    elif data.startswith('quiz_mc_answer_'):
        await handle_multiple_choice_answer(update, context)
    elif data == 'quiz_true_false':
        await start_true_false_quiz(update, context)
    elif data == 'quiz_multiple_choice':
        await start_multiple_choice_quiz(update, context)
    elif data == 'open_quiz_menu':
        await query.edit_message_text(text="📝 Викторина түрін таңдаңыз:", reply_markup=build_quiz_menu())
    elif data == 'molar_mass_calc':
        await query.edit_message_text(
            text="🧮 Химиялық формуланы енгізіңіз (мысалы, <code>H2SO4</code> немесе <code>Ca(OH)2</code>):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu')]]),
            parse_mode=ParseMode.HTML # Используем HTML
        )
        context.user_data['next_action'] = 'calculate_molar_mass_input'
    elif data == 'show_progress':
        await show_progress(update, context)
    elif data == 'find_reaction':
        await query.edit_message_text(
            text="🧬 Реагенттерді '+' арқылы енгізіңіз (мысалы, <code>Na + Cl2</code> немесе <code>CaCO3</code>).\n"
                 "Мен өз базамнан сәйкес реакция теңдеуін іздеймін.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu')]]),
            parse_mode=ParseMode.HTML # Используем HTML
        )
        context.user_data['next_action'] = 'find_reaction_input'
    elif data == 'show_lectures':
        await query.edit_message_text(
            text="📚 Тізімнен дәрісті таңдаңыз:",
            reply_markup=build_lecture_menu()
        )
    elif data.startswith('lecture_'):
        lecture_key = data.split('lecture_', 1)[-1]
        if lecture_key in LECTURES_DATA:
            lecture = LECTURES_DATA[lecture_key]
            keyboard = [
                [InlineKeyboardButton("« Дәрістер тізіміне", callback_data='show_lectures')],
                [InlineKeyboardButton("« Негізгі мәзірге", callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=lecture['content'],
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML, # ИЗМЕНЕНО НА HTML
                disable_web_page_preview=True # ДОБАВЛЕНО
            )
        else:
            await query.edit_message_text(
                "😕 Бұл дәрісті таба алмадым. Мүмкін ол жойылған шығар.",
                reply_markup=build_main_menu(),
                disable_web_page_preview=True
            )
    elif data == 'periodic_table_image':
        image_path = 'periodic_table.jpg'
        try:
            # Check if query.message exists before trying to access chat_id
            chat_id = query.message.chat_id if query.message else None
            if not chat_id:
                logger.error("periodic_table_image: query.message is None, cannot get chat_id")
                return # Cannot proceed without chat_id

            await context.bot.send_photo(
                chat_id=chat_id,
                photo=open(image_path, 'rb'),
                caption="Менделеев кестесі",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu_from_photo')]])
            )
            # Try to remove buttons from the original message
            if query.message:
                 await query.edit_message_reply_markup(reply_markup=None)
        except FileNotFoundError:
            logger.error(f"Менделеев кестесінің сурет файлы табылмады: {image_path}")
            # Ensure chat_id exists before sending error message
            chat_id = query.message.chat_id if query.message else None
            if chat_id:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"❌ Қате: Кесте суреті бар файлды ('{image_path}') таба алмадым. Оның ботпен бір қалтада орналасқанына көз жеткізіңіз.",
                    reply_markup=build_main_menu()
                )
        except Exception as e:
            logger.error(f"Менделеев кестесінің фотосын жіберу қатесі: {e}", exc_info=True)
            chat_id = query.message.chat_id if query.message else None
            if chat_id:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="❌ Кесте суретін жіберу әрекеті кезінде қате пайда болды.",
                    reply_markup=build_main_menu()
                )
    elif data == 'main_menu_from_photo':
        # Ensure chat_id exists before sending message
        chat_id = query.message.chat_id if query.message else None
        if chat_id:
             await context.bot.send_message(chat_id=chat_id, text='📌 Негізгі мәзір:', reply_markup=build_main_menu())
        else:
             logger.error("main_menu_from_photo: query.message is None, cannot get chat_id")

    elif data == 'main_menu':
         try:
              await query.edit_message_text('📌 Негізгі мәзір:', reply_markup=build_main_menu())
         except Exception as e:
              logger.warning(f"main_menu үшін хабарламаны өңдеу сәтсіз болды: {e}. Жаңасын жіберу.")
              chat_id = query.message.chat_id if query.message else None
              if chat_id:
                   await context.bot.send_message(chat_id=chat_id, text='📌 Негізгі мәзір:', reply_markup=build_main_menu())
              else:
                   logger.error("main_menu: query.message is None, cannot get chat_id for new message")

    elif data == 'info_compound':
        await query.edit_message_text(
            text="ℹ️ Заттың формуласын енгізіңіз (мысалы, <code>H2O</code> немесе <code>NaOH</code>).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu')]]),
            parse_mode=ParseMode.HTML # Используем HTML
            )
        context.user_data['next_action'] = 'get_compound_info'
    elif data == 'find_element':
        await query.edit_message_text(
            text="⚛️ Элементтің таңбасын (мысалы, <code>Fe</code>) немесе оның реттік нөмірін (мысалы, <code>26</code>) енгізіңіз.",
             reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("« Мәзірге оралу", callback_data='main_menu')]]),
             parse_mode=ParseMode.HTML # Используем HTML
            )
        context.user_data['next_action'] = 'get_element_info'
    elif data == 'help':
        await help_command(update, context)
    else:
        logger.warning(f"Получен неизвестный callback_data: {data}")
        try:
            await query.edit_message_text(text="🤔 Белгісіз опция. Негізгі мәзірге оралу.", reply_markup=build_main_menu())
        except Exception as e:
            logger.error(f"Белгісіз {data} батырмасын өңдеу қатесі: {e}")


# --- Мәтіндік хабарлама өңдеушісі (MessageHandler) ---
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Пайдаланушыдан енгізу күтілгенде мәтіндік хабарламаларды өңдейді."""
    text = update.message.text.strip()
    next_action = context.user_data.get('next_action')

    if next_action == 'calculate_molar_mass_input':
        context.user_data.pop('next_action', None)
        result = calculate_molar_mass(text)
        await update.message.reply_html(result, reply_markup=build_main_menu(), disable_web_page_preview=True) # Отправляем в HTML
    elif next_action == 'find_reaction_input':
        context.user_data.pop('next_action', None)
        message_to_reply = update.message
        try:
            if '->' in text: text = text.split('->')[0].strip()
            reactants_raw = [r.strip().upper() for r in text.split('+') if r.strip()]

            if not reactants_raw:
                 await message_to_reply.reply_html("Реагенттерді тану мүмкін болмады. '+' белгісімен бөліп, қайталап көріңіз.", reply_markup=build_main_menu(), disable_web_page_preview=True)
                 return

            reactants_key_input = tuple(sorted(reactants_raw))
            logger.info(f"Реагенттер үшін реакция ізделуде: {reactants_key_input}")

            found_reaction_data = REACTIONS_DATA.get(reactants_key_input)

            if found_reaction_data:
                response = (
                    f"✅ Реакция табылды:\n"
                    f"<code>{found_reaction_data['equation']}</code>\n\n" # Используем code
                    f"Реакция түрі: {found_reaction_data.get('type', 'Көрсетілмеген')}"
                 )
                await message_to_reply.reply_html(response, reply_markup=build_main_menu(), disable_web_page_preview=True)
            else:
                user_input_str = ' + '.join(reactants_key_input)
                await message_to_reply.reply_html(
                    f"❌ <code>{user_input_str}</code> реагенттері үшін реакция менің дерекқорымда табылмады.\n"
                    "Мүмкін мұндай реакция жоқ, ол басқаша жазылған немесе мен оны әлі білмеймін.",
                    reply_markup=build_main_menu(),
                    disable_web_page_preview=True
                )
        except Exception as e:
            logger.error(f"'{text}' үшін реакцияны іздеу кезінде қате пайда болды: {e}", exc_info=True)
            await message_to_reply.reply_html(
                "Сұранысыңызды өңдеу кезінде қате пайда болды. Пожалуйста, убедитесь, что реагенты разделены знаком '+' и попробуйте снова.",
                reply_markup=build_main_menu(),
                disable_web_page_preview=True
            )

    elif next_action == 'get_compound_info':
        context.user_data.pop('next_action', None)
        formula = text.upper()
        if formula in COMPOUNDS_DATA:
            data = COMPOUNDS_DATA[formula]
            response = f"🧪 <b>{data.get('name', 'Атауы көрсетілмеген')} ({formula})</b>\n"
            if 'type' in data: response += f"Түрі: {data['type']}\n"
            if 'properties' in data: response += f"Қасиеттері: {data['properties']}\n"
            if 'application' in data: response += f"Қолданылуы: {data['application']}"
            await update.message.reply_html(response, reply_markup=build_main_menu(), disable_web_page_preview=True)
        else:
            await update.message.reply_html(f"❌ <code>{formula}</code> формуласы бар зат анықтамалықта табылмады.", reply_markup=build_main_menu(), disable_web_page_preview=True)

    elif next_action == 'get_element_info':
        context.user_data.pop('next_action', None)
        query_arg = text.strip()
        found = False
        response = ""
        query_symbol = query_arg.title()

        if query_symbol in ELEMENTS_DATA:
            data = ELEMENTS_DATA[query_symbol]
            response = (
                f"⚛️ <b>{data.get('name', 'Аты табылмады')} ({query_symbol})</b>\n"
                f"Атомдық нөмірі: {data.get('atomic_number', 'белгісіз')}\n"
                f"Салыстырмалы атомдық массасы: {data.get('atomic_mass', 'белгісіз')}"
            )
            found = True
        else:
            try:
                atomic_number = int(query_arg)
                for symbol, data in ELEMENTS_DATA.items():
                    if data.get('atomic_number') == atomic_number:
                        response = (
                            f"⚛️ <b>{data.get('name', 'Аты табылмады')} ({symbol})</b>\n"
                            f"Атомдық нөмірі: {data.get('atomic_number', 'белгісіз')}\n"
                            f"Салыстырмалы атомдық массасы: {data.get('atomic_mass', 'белгісіз')}"
                        )
                        found = True
                        break
                if not found:
                     response = f"❌ Атомдық нөмірі <code>{atomic_number}</code> элемент табылмады."
            except ValueError:
                response = f"❌ '<code>{query_arg}</code>' танылмады. Элементтің таңбасын (мысалы, Fe) немесе оның атомдық нөмірін (мысалы, 26) енгізіңіз."

        await update.message.reply_html(response, reply_markup=build_main_menu(), disable_web_page_preview=True)

    else:
        # If no specific action is expected, provide the menu
        await update.message.reply_text(
             "Сәлем! Бастау үшін /menu ішіндегі батырмаларды немесе анықтама алу үшін /help командасын пайдаланыңыз.",
             reply_markup=build_main_menu(),
             disable_web_page_preview=True # Disable preview here too
        )

# --- Негізгі функция ---
def main() -> None:
    """Ботты іске қосады."""
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logging.critical("!!! BOT_TOKEN орнатылмаған немесе әдепкі мән пайдаланылуда!")
        print("!!! Қате: BOT_TOKEN табылмады немесе өзгертілмеген. Кодтағы 'YOUR_BOT_TOKEN_HERE' мәнін ауыстырыңыз немесе BOT_TOKEN қоршаған орта айнымалысын орнатыңыз.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # Командалар
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command_handler))
    application.add_handler(CommandHandler("element", element_command_handler))
    application.add_handler(CommandHandler("molar_mass", molar_mass_command_handler))

    # Батырмалар
    application.add_handler(CallbackQueryHandler(button_handler))

    # Мәтіндік хабарламалар
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    logging.info("Бот іске қосылуда...")
    print("Бот іске қосылуда...")
    application.run_polling()

if __name__ == "__main__":
    main()